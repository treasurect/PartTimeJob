package com.treasure.parttimejob.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.treasure.parttimejob.ui.model.PartTimeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PART_TIME_BEAN".
*/
public class PartTimeBeanDao extends AbstractDao<PartTimeBean, Long> {

    public static final String TABLENAME = "PART_TIME_BEAN";

    /**
     * Properties of entity PartTimeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Part_name = new Property(1, String.class, "part_name", false, "PART_NAME");
        public final static Property Part_duration = new Property(2, String.class, "part_duration", false, "PART_DURATION");
        public final static Property Part_content = new Property(3, String.class, "part_content", false, "PART_CONTENT");
        public final static Property Part_address = new Property(4, String.class, "part_address", false, "PART_ADDRESS");
        public final static Property Latitude = new Property(5, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(6, double.class, "longitude", false, "LONGITUDE");
        public final static Property Part_money = new Property(7, String.class, "part_money", false, "PART_MONEY");
        public final static Property Part_sex = new Property(8, String.class, "part_sex", false, "PART_SEX");
        public final static Property Part_clearing = new Property(9, String.class, "part_clearing", false, "PART_CLEARING");
        public final static Property Part_type = new Property(10, String.class, "part_type", false, "PART_TYPE");
        public final static Property Skill_id = new Property(11, Long.class, "skill_id", false, "SKILL_ID");
        public final static Property Part_state = new Property(12, String.class, "part_state", false, "PART_STATE");
        public final static Property Part_image = new Property(13, String.class, "part_image", false, "PART_IMAGE");
        public final static Property Business_image = new Property(14, String.class, "business_image", false, "BUSINESS_IMAGE");
        public final static Property Business_name = new Property(15, String.class, "business_name", false, "BUSINESS_NAME");
        public final static Property Business_phone = new Property(16, String.class, "business_phone", false, "BUSINESS_PHONE");
        public final static Property Part_collect = new Property(17, boolean.class, "part_collect", false, "PART_COLLECT");
        public final static Property Part_apply = new Property(18, int.class, "part_apply", false, "PART_APPLY");
        public final static Property Rating = new Property(19, float.class, "rating", false, "RATING");
    }


    public PartTimeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PartTimeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PART_TIME_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PART_NAME\" TEXT," + // 1: part_name
                "\"PART_DURATION\" TEXT," + // 2: part_duration
                "\"PART_CONTENT\" TEXT," + // 3: part_content
                "\"PART_ADDRESS\" TEXT," + // 4: part_address
                "\"LATITUDE\" REAL NOT NULL ," + // 5: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 6: longitude
                "\"PART_MONEY\" TEXT," + // 7: part_money
                "\"PART_SEX\" TEXT," + // 8: part_sex
                "\"PART_CLEARING\" TEXT," + // 9: part_clearing
                "\"PART_TYPE\" TEXT," + // 10: part_type
                "\"SKILL_ID\" INTEGER," + // 11: skill_id
                "\"PART_STATE\" TEXT," + // 12: part_state
                "\"PART_IMAGE\" TEXT," + // 13: part_image
                "\"BUSINESS_IMAGE\" TEXT," + // 14: business_image
                "\"BUSINESS_NAME\" TEXT," + // 15: business_name
                "\"BUSINESS_PHONE\" TEXT," + // 16: business_phone
                "\"PART_COLLECT\" INTEGER NOT NULL ," + // 17: part_collect
                "\"PART_APPLY\" INTEGER NOT NULL ," + // 18: part_apply
                "\"RATING\" REAL NOT NULL );"); // 19: rating
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PART_TIME_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PartTimeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String part_name = entity.getPart_name();
        if (part_name != null) {
            stmt.bindString(2, part_name);
        }
 
        String part_duration = entity.getPart_duration();
        if (part_duration != null) {
            stmt.bindString(3, part_duration);
        }
 
        String part_content = entity.getPart_content();
        if (part_content != null) {
            stmt.bindString(4, part_content);
        }
 
        String part_address = entity.getPart_address();
        if (part_address != null) {
            stmt.bindString(5, part_address);
        }
        stmt.bindDouble(6, entity.getLatitude());
        stmt.bindDouble(7, entity.getLongitude());
 
        String part_money = entity.getPart_money();
        if (part_money != null) {
            stmt.bindString(8, part_money);
        }
 
        String part_sex = entity.getPart_sex();
        if (part_sex != null) {
            stmt.bindString(9, part_sex);
        }
 
        String part_clearing = entity.getPart_clearing();
        if (part_clearing != null) {
            stmt.bindString(10, part_clearing);
        }
 
        String part_type = entity.getPart_type();
        if (part_type != null) {
            stmt.bindString(11, part_type);
        }
 
        Long skill_id = entity.getSkill_id();
        if (skill_id != null) {
            stmt.bindLong(12, skill_id);
        }
 
        String part_state = entity.getPart_state();
        if (part_state != null) {
            stmt.bindString(13, part_state);
        }
 
        String part_image = entity.getPart_image();
        if (part_image != null) {
            stmt.bindString(14, part_image);
        }
 
        String business_image = entity.getBusiness_image();
        if (business_image != null) {
            stmt.bindString(15, business_image);
        }
 
        String business_name = entity.getBusiness_name();
        if (business_name != null) {
            stmt.bindString(16, business_name);
        }
 
        String business_phone = entity.getBusiness_phone();
        if (business_phone != null) {
            stmt.bindString(17, business_phone);
        }
        stmt.bindLong(18, entity.getPart_collect() ? 1L: 0L);
        stmt.bindLong(19, entity.getPart_apply());
        stmt.bindDouble(20, entity.getRating());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PartTimeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String part_name = entity.getPart_name();
        if (part_name != null) {
            stmt.bindString(2, part_name);
        }
 
        String part_duration = entity.getPart_duration();
        if (part_duration != null) {
            stmt.bindString(3, part_duration);
        }
 
        String part_content = entity.getPart_content();
        if (part_content != null) {
            stmt.bindString(4, part_content);
        }
 
        String part_address = entity.getPart_address();
        if (part_address != null) {
            stmt.bindString(5, part_address);
        }
        stmt.bindDouble(6, entity.getLatitude());
        stmt.bindDouble(7, entity.getLongitude());
 
        String part_money = entity.getPart_money();
        if (part_money != null) {
            stmt.bindString(8, part_money);
        }
 
        String part_sex = entity.getPart_sex();
        if (part_sex != null) {
            stmt.bindString(9, part_sex);
        }
 
        String part_clearing = entity.getPart_clearing();
        if (part_clearing != null) {
            stmt.bindString(10, part_clearing);
        }
 
        String part_type = entity.getPart_type();
        if (part_type != null) {
            stmt.bindString(11, part_type);
        }
 
        Long skill_id = entity.getSkill_id();
        if (skill_id != null) {
            stmt.bindLong(12, skill_id);
        }
 
        String part_state = entity.getPart_state();
        if (part_state != null) {
            stmt.bindString(13, part_state);
        }
 
        String part_image = entity.getPart_image();
        if (part_image != null) {
            stmt.bindString(14, part_image);
        }
 
        String business_image = entity.getBusiness_image();
        if (business_image != null) {
            stmt.bindString(15, business_image);
        }
 
        String business_name = entity.getBusiness_name();
        if (business_name != null) {
            stmt.bindString(16, business_name);
        }
 
        String business_phone = entity.getBusiness_phone();
        if (business_phone != null) {
            stmt.bindString(17, business_phone);
        }
        stmt.bindLong(18, entity.getPart_collect() ? 1L: 0L);
        stmt.bindLong(19, entity.getPart_apply());
        stmt.bindDouble(20, entity.getRating());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PartTimeBean readEntity(Cursor cursor, int offset) {
        PartTimeBean entity = new PartTimeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // part_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // part_duration
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // part_content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // part_address
            cursor.getDouble(offset + 5), // latitude
            cursor.getDouble(offset + 6), // longitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // part_money
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // part_sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // part_clearing
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // part_type
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // skill_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // part_state
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // part_image
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // business_image
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // business_name
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // business_phone
            cursor.getShort(offset + 17) != 0, // part_collect
            cursor.getInt(offset + 18), // part_apply
            cursor.getFloat(offset + 19) // rating
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PartTimeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPart_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPart_duration(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPart_content(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPart_address(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitude(cursor.getDouble(offset + 5));
        entity.setLongitude(cursor.getDouble(offset + 6));
        entity.setPart_money(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPart_sex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPart_clearing(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPart_type(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSkill_id(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setPart_state(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPart_image(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBusiness_image(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBusiness_name(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBusiness_phone(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPart_collect(cursor.getShort(offset + 17) != 0);
        entity.setPart_apply(cursor.getInt(offset + 18));
        entity.setRating(cursor.getFloat(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PartTimeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PartTimeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PartTimeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
